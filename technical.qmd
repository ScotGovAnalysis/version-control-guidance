---
title: "Using Git and GitHub in the Scottish Government<br><img class='image1' src='images/git.svg' alt=''/>&nbsp;<img class='image1' src='images/github.svg' alt=''/>"
author: "Alice Byers, Data Innovation Team"
institute: "Scottish Government"
format:
  revealjs: 
    embed-resources: true
    slide-number: true
    logo: images/SG-logo.jpg
    controls: true
    link-external-newwindow: true
    theme: [default, styles.scss]
    code-line-numbers: false
    auto-stretch: false
execute:
  echo: true
  eval: false
  fig-format: "svg"
lang: en
---


## Aims

-   These slides aim to demonstrate the use of Git and GitHub in the Scottish Government when working in the SCOTS network.

-   An understanding of the concepts of version control, Git and GitHub is assumed. 
More information can be found in the [Introduction to Version Control slides](https://alicebyers5.github.io/presentations-and-blogs/2023-04-27_git-github-intro/slides.html).

-   Further guidance and resources for using version control on SCOTS are available on the [Statistics Group sharepoint site](https://scotsconnect.sharepoint.com/sites/StatisticsGroup-Org-SG/SitePages/Version-Control.aspx).


## Contents

-   [How to install and setup Git](#git-setup)

-   [A basic Git workflow](#git-workflow)

-   [How to use Git with RStudio integration](#using-git-with-rstudio-integration)

-   [GitHub and the Data Science Scotland organisation](#github-and-data-science-scotland)

-   [Using Git with GitHub](#using-git-with-github)

-   [Branches and other GitHub features](#theres-more)

-   [Links, resources and contact details](#resources)


# Git setup {.h1-blue}

## Install Git

-   Make an [iFix request](https://ifix.systems.gov.scot/assystnet/application.jsp#serviceOfferings/257) for "Git version 2.21.0.windows.1"

-   Git is a free and open-source software and therefore does not incur a cost to install


## Git Bash

-   Git Bash is a command line interface for using Git

-   It is installed with Git

![](images/screenshots/git-bash.png){fig-align="center" width=60%}


## Git Bash

-   Some basic commands include:

    - `pwd`; prints present working directory
  
    - `ls`; lists files contained in working directory
  
    - `cd <filepath>`; changes working directory

-   [Git Bash cheat sheet](https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet)

-   ONS Learning Hub has further training on [Command Line Basics](https://analysisfunction.civilservice.gov.uk/training/command-line-basics/)


## Set name and email {.h2-no-padding .smaller}

-   Your name and email is linked to every commit you make using Git

-   If you plan to use GitHub, make sure your user name and email address match those associated with your GitHub account

::: {.panel-tabset}

### Screenshot

![](images/screenshots/git-config.png){fig-align="center" width=50%}

### Code

```bash
# Set user name
git config --global user.name <username>

# Set email
git config --global user.email <email>

# Check this has worked
git config --global user.name
git config --global user.email
```

:::

## Summary

-   Install Git via iFix

-   Set name and email address in Git Bash


# Git workflow {.h1-blue}


## Example project folder

<br>

![](images/screenshots/file-explorer.png){fig-align="center" width=80%}

::: {.notes}
-   Avoid storing projects using Git in OneDrive
:::


## Open Git Bash in working directory {.h2-no-padding}

::: {.panel-tabset}

### File Explorer

-   Right click in project folder and select 'Git Bash here'

![](images/screenshots/git-bash-here.png){fig-align="center" width=60%}
 
### cd in Git Bash

-   Open Git Bash from Windows start menu

-   Use `cd` command to change directory to your working folder

![](images/screenshots/cd.png){fig-align="center" width=50%}

:::


## Initiate Git respository {.h2-no-padding .smaller}

-   Run `git init` to initiate Git. 
This will create a .git folder within your project. 
(Note: you only need to do this once per project.)

::: {.panel-tabset}

### Screenshot

![](images/screenshots/git-init.png){fig-align="center" width=60%}

### Code

```bash
git init
```

:::

## Create a gitignore file {.smaller}

-   The gitignore defines what files **should not be tracked** by Git

-   This is especially important if you plan on using GitHub as sensitive information should not be made available there

-   Generally, the following should be ignored:

    -   Data files

    -   Passwords or credentials

    -   Code that contains sensitive information

    -   Configuration files


## Create a gitignore file {.smaller}

To tell Git to ignore these files:

-   Create a new file in your directory called `.gitignore`. 
This can be done in the usual way in File Explorer, or by using the `touch` command in Git Bash.

-   Open the gitignore file in a text editor (or R) and add names of folders and files to be ignored.

    -   If you're not sure what to include, this [example gitignore](https://github.com/DataScienceScotland/welcome/blob/main/.gitignore) contains many common data and R files. Copy the contents to the file you've just created.


## git status {.h2-no-padding .smaller}

-   Use `git status` to show a summary of your Git repository - run this often to check that your other git commands have done what you expect them to do

::: {.panel-tabset}

### Screenshot

![](images/screenshots/git-status.png){fig-align="center" width=50%}

-   Notice that `data.csv` is not listed here. This is because we have told Git to ignore csv files in the gitignore.

### Code

```bash
git status
```

:::

## git add {.h2-no-padding .smaller}

-   Use `git add` to 'stage' files for the next commit

    - Either list the files you'd like to stage; e.g. `git add code.R`, or
    
    - To stage all tracked files, use a full stop; e.g. `git add .` 

::: {.panel-tabset}

### Screenshot

![](images/screenshots/git-add.png){fig-align="center" width=60%}

### Code

```bash
git add .
```

:::

## git add {.h2-no-padding .smaller}

-   Use `git status` to check that the correct files have been staged

::: {.panel-tabset}

### Screenshot

![](images/screenshots/git-add-status.png){fig-align="center" width=60%}

-   Files names are now coloured green and listed under 'changes to be committed'

### Code

```bash
git status
```

:::


## git commit {.h2-no-padding .smaller}

-   Use `git commit` to commit the files to the Git history

    -   All staged files will be included in the commit

    -   Accompany the commit with a message to give a [short and informative description](https://best-practice-and-impact.github.io/qa-of-code-guidance/version_control.html#write-short-and-informative-commits) of the changes
    
::: {.panel-tabset}

### Screenshot 

![](images/screenshots/git-commit.png){fig-align="center" width=55%}

### Code

```bash
git commit -m "Add files"
```

:::


## Your first commit {.h2-no-padding}

-   Running `git status` again shows that there are no further changes to commit

::: {.panel-tabset}

### Screenshot

![](images/screenshots/git-commit-status.png){fig-align="center" width=70%}

### Code

```bash
git status
```

:::


## Your first commit {.h2-no-padding}

-   Running `git log --oneline` will give a short summary of the commit history

::: {.panel-tabset}

### Screenshot

![](images/screenshots/git-log.png){fig-align="center" width=70%}

### Code

```bash
git log --oneline
```

:::


## Make a change

-   Now, let's make a change to `code.R`. 
Add some commented lines to give the script a title and description.

<center>
::: {layout-ncol=2}

![Before](images/screenshots/code-orig.png){width=48%}

::: {.fragment}
![After](images/screenshots/code-change.png){width=48%}
:::

:::
</center>


## Make a change

-   Run `git status` to check that Git has recognised the change

![](images/screenshots/unstaged-change.png){fig-align="center" width=70%}


## git diff {.h2-no-padding}

- Run `git diff` to inspect what changes have been made to `code.R`.
Green text highlights additions and red text highlights deletions.

![](images/screenshots/git-diff.png){fig-align="center" width=70%}


## Stage and commit the change {.h2-no-padding}

-   Use `git add` and `git commit` to stage and commit the change to `code.R`.

![](images/screenshots/stage-and-commit-change.png){fig-align="center" width=70%}


## Stage and commit the change

-   Use `git log` to view the Git history - there are now two commits

![](images/screenshots/git-log-2.png){fig-align="center" width=70%}


## Tips

-   Commit often (especially when you're still learning)

-   Write [commit messages that make sense](https://best-practice-and-impact.github.io/qa-of-code-guidance/version_control.html#write-short-and-informative-commits) (your future self and colleagues will thank you)

-   Run `git status` often (especially when you're still learning)

    -   Check which files have changes tracked
    
    -   Check you have staged the correct files

    -   Check files that should be ignored are not being tracked (and committed!)


## Summary

-   Make a change

-   `git add`

-   `git commit`

-   `git status` often


# Using Git with RStudio Integration {.h1-blue}

## RStudio {.h2-no-padding .smaller}

-   You can also interact with Git from within RStudio (instead of using Git Bash)

-   Not all Git functionality is available, but it can be more user-friendly and convenient if you're working with R

-   Changes are listed in the Git pane (usually in the top right window)

![](images/screenshots/rstudio-git.png){fig-align="center" width=55%}


## Open the commit window

-   Click the 'Commit' button to open up the commit window

![](images/screenshots/rstudio-git-2.png){fig-align="center" width=75%}


## Commiting a change from RStudio {.h2-no-padding .smaller}

-   Like Git Bash, you need to both stage and commit the change

-   To stage, tick the box next to each file you'd like to add (top-left pane)

-   To commit, enter a message and click 'Commit' (top-right pane)

![](images/screenshots/rstudio-commit.png){fig-align="center" width=55%}


# GitHub and<br> Data Science Scotland {.h1-blue}

## Create GitHub account {.h2-no-padding}

-   Go to [github.com](www.github.com) and click 'Sign Up'

    -   Use your work email address
    
-   [Enable two-factor authentication](https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa/configuring-two-factor-authentication)

-   [Personalise your profile](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile)

    -   Make your gov.scot email address public
    
    -   Add your employer
    
    -   Add a photo (if you'd like!)


## Data Science Scotland organisation

-   Work projects should all be hosted from the Data Science Scotland organisation

    -   Easier to find related repositories
    
    -   Easier to manage who can access repositories
    
    -   When people leave the organisation, code doesn't leave with them!
    
-   There's lots of useful information in the [welcome repository](https://github.com/DataScienceScotland/welcome)


## Join Data Science Scotland organisation

-   [Request to join](https://github.com/DataScienceScotland/welcome/issues/new?assignees=alicebyers5%2Ctomwilsonsco%2Cjsphdms&labels=member-request&template=new-member-request.yml&title=New+member+request) the organisation

    - You'll be asked to read the [SG GitHub User Responsibilities](https://erdm.scotland.gov.uk/documents/A42743383/details)
    
-   Once your request has been accepted, you will be able to [create Git repositories in Data Science Scotland](https://github.com/organizations/DataScienceScotland/repositories/new)


## Create a repository

<center>
![](images/screenshots/github-new-repo-1.png){width=80%}
</center>


## Create a repository

<center>
![](images/screenshots/github-new-repo-2.png){width=80%}
</center>


## Create a repository

-   Select Data Science Scotland as owner for work projects

-   Give the repository a name

-   Choose whether to make your repository public or private

-   Add a README file

-   Click the green 'Create repository' button


# Using Git with GitHub {.h1-blue}

## Remote repository

-   A 'remote' is a version of your Git repository hosted on the internet or network somewhere

-   This should be thought of as the main place where your repository is stored

-   Most commonly, GitHub is used to host remote repositories.
But, it could also be a folder on an internal shared network.


## Remote repository {.h2-no-padding .smaller}

-   Users take a copy ('clone') of the repository from the remote

-   Users regularly 'push' their changes back to the remote so other users have access to the latest version

-   Users regularly 'pull' from the remote to ensure they are working with the latest version

![](images/screenshots/remote.png){fig-align="center" width=40%}


## SSH keys

-   An SSH key is a way of identifying yourself to GitHub that means you don't have to provide your username and password every time

-   You must use an SSH key when working with GitHub on SCOTS

-   To set up, generate an SSH key pair in Git Bash and add the public key to your GitHub account

::: {.callout-note appearance="simple"}
You only need to create an SSH key once per device.
:::


## Create SSH key

-   Generate an SSH key in Git Bash

    ```{r engine = "bash"}
    ssh-keygen -t ed25519 -C "your_email@example.com"
    ```

    (Use the email registered with your Github account)

-   When asked where you want to create the key, press enter to use the default location

-   When asked if you want to set a passphrase, press enter twice to skip


## Add SSH key to GitHub account

-   Copy the SSH key:

    ```{r engine = "bash"}
    # Navigate to the directory where you've saved your SSH key
    cd ~/.ssh

    # Print the contents of the public SSH key file
    cat id_ed25519.pub
    ```
    
    Copy the returned value from Git Bash.

-   [Add the copied SSH key to your GitHub account](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account#adding-a-new-ssh-key-to-your-account) by going to Settings, then SSH and GPG keys


## Clone repository from GitHub {.h2-no-padding .smaller}

-   Now you have an SSH key set up, you should use the SSH URL to clone repositories from GitHub

-   Click the green 'Code' button and under 'Clone', select 'SSH', and copy the address

![](images/screenshots/copy-ssh.png){fig-align="center" width=50%}


## Clone repository from GitHub {.h2-no-padding .smaller}

-   Open Git Bash and [navigate to the directory](#open-git-bash-in-working-directory) you'd like to clone the repository to

-   Use `git clone <url>` to clone the repository

-   Change directory to the cloned repository using `cd`

![](images/screenshots/git-clone.png){fig-align="center" width=55%}


## Make a change {.h2-no-padding .smaller}

-   Follow [Git workflow](#git-workflow) to:

    -   Add a new file

    -   `git add`

    -   `git commit`

![](images/screenshots/github-repo-change.png){fig-align="center" width=50%}


## Push to GitHub {.h2-no-padding .smaller}

-   'Push' the commit to GitHub (the remote) using `git push`

-   Note that `git status` now says the repository is up to date with origin/main (this is another name for the remote repository)

![](images/screenshots/git-push.png){fig-align="center" width=55%}


## Push to GitHub {.h2-no-padding .smaller}

-   The new file and commit is now visible by viewing the GitHub repository

![](images/screenshots/git-push-2.png){fig-align="center" width=65%}


## Pull from GitHub {.h2-no-padding .smaller}

-   'Pull' from GitHub regularly using `git pull` to ensure your local copy of the repository is up to date (especially if other people are also working on the repository)

-   Note that there is now an extra commit when running `git log`

![](images/screenshots/git-pull.png){fig-align="center" width=55%}


## Summary

-   Use SSH keys to connect to GitHub from Git Bash

-   `git clone` to clone a repository from GitHub

-   Follow [Git workflow](#git-workflow) described earlier in slides

-   `git push` often to push local commits to GitHub

-   `git pull` often to pull new commits on GitHub to local copy/clone


# There's more! {.h1-blue}

::: {.notes}
-   The content covered so far will hopefully be enough to help you get started using Git and GitHub.
-   However, there are more features that are of particular use when working and collaborating with others.
:::


## Branches {.h2-no-padding .smaller}

-   When you create a Git repository, you begin with a single 'branch', usually called `main`

-   The `main` branch is usually viewed as the 'production-ready' version of your code

-   You can create new branches to make developments, test new ideas and to facilitate multiple people working on the code at the same time

-   Branches allow users to make changes to files without affecting the 'production-ready' `main` branch

-   Changes made in a branch can be peer reviewed before being merged into the `main` branch

-   More information on branching in the [Duck book](https://best-practice-and-impact.github.io/qa-of-code-guidance/version_control.html#use-branching-appropriately)


## GitHub features {.smaller}

-   [Pull requests](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests) and [code review](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests)

    -   Open a pull request to merge a branch and request a code review from a collaborator

-   [Issues](https://docs.github.com/en/issues/tracking-your-work-with-issues)

    -   Keep track of bugs and requested enhancements for future development

-   [Projects](https://docs.github.com/en/issues/planning-and-tracking-with-projects)

    -   A task board for planning and tracking work. Integrates with issues and pull requests. 


## Resources {.smaller}

-   [Scottish Government version control guidance](https://scotsconnect.sharepoint.com/sites/StatisticsGroup-Org-SG/SitePages/Version-Control.aspx)

-   [Introduction to Git and GitHub slides](https://alicebyers5.github.io/presentations-and-blogs/2023-04-27_git-github-intro/slides.html)

-   [RAP Yammer Community](https://web.yammer.com/main/groups/eyJfdHlwZSI6Ikdyb3VwIiwiaWQiOiIxOTI2NDMyMzU4NSJ9/all)

- [Duck book](https://best-practice-and-impact.github.io/qa-of-code-guidance/version_control.html)

    -   [Writing good commit messages](https://best-practice-and-impact.github.io/qa-of-code-guidance/version_control.html#write-short-and-informative-commits)
    
    -   [Avoid committing sensitive information to Git repositories](https://best-practice-and-impact.github.io/qa-of-code-guidance/version_control.html#avoid-committing-sensitive-information-to-git-repositories)
    
    -   [Using branches](https://best-practice-and-impact.github.io/qa-of-code-guidance/version_control.html#use-branching-appropriately)
    
-   [Happy Git with R](https://happygitwithr.com/index.html)


## Contact {.smaller}

Alice Byers

Reproducible Analytical Pipeline (RAP) Developer

Data Innovation Team, Scottish Government

<alice.byers@gov.scot>

[GitHub profile](https://github.com/alicebyers5)